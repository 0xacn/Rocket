warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
 --> $DIR/lib.rs:1:12
  |
1 | #![feature(specialization)]
  |            ^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information

warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
 --> $DIR/lib.rs:1:12
  |
1 | #![feature(specialization)]
  |            ^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information

warning: trait objects without an explicit `dyn` are deprecated
   --> $DIR/uri_display.rs:299:43
    |
299 | impl<'a, P: UriPart> fmt::Display for &'a UriDisplay<P> {
    |                                           ^^^^^^^^^^^^^ help: use `dyn`: `dyn UriDisplay<P>`
    |
    = note: `#[warn(bare_trait_objects)]` on by default

warning: trait objects without an explicit `dyn` are deprecated
   --> $DIR/uri_display.rs:299:43
    |
299 | impl<'a, P: UriPart> fmt::Display for &'a UriDisplay<P> {
    |                                           ^^^^^^^^^^^^^ help: use `dyn`: `dyn UriDisplay<P>`
    |
    = note: `#[warn(bare_trait_objects)]` on by default

warning: `...` range patterns are deprecated
 --> $DIR/checkers.rs:9:12
  |
9 |         '0'...'9' | 'A'...'Z' | '^'...'~' | '#'...'\''
  |            ^^^ help: use `..=` for an inclusive range
  |
  = note: `#[warn(ellipsis_inclusive_range_patterns)]` on by default

warning: `...` range patterns are deprecated
 --> $DIR/checkers.rs:9:12
  |
9 |         '0'...'9' | 'A'...'Z' | '^'...'~' | '#'...'\''
  |            ^^^ help: use `..=` for an inclusive range
  |
  = note: `#[warn(ellipsis_inclusive_range_patterns)]` on by default

warning: `...` range patterns are deprecated
 --> $DIR/checkers.rs:9:24
  |
9 |         '0'...'9' | 'A'...'Z' | '^'...'~' | '#'...'\''
  |                        ^^^ help: use `..=` for an inclusive range

warning: `...` range patterns are deprecated
 --> $DIR/checkers.rs:9:24
  |
9 |         '0'...'9' | 'A'...'Z' | '^'...'~' | '#'...'\''
  |                        ^^^ help: use `..=` for an inclusive range

warning: `...` range patterns are deprecated
 --> $DIR/checkers.rs:9:36
  |
9 |         '0'...'9' | 'A'...'Z' | '^'...'~' | '#'...'\''
  |                                    ^^^ help: use `..=` for an inclusive range

warning: `...` range patterns are deprecated
 --> $DIR/checkers.rs:9:36
  |
9 |         '0'...'9' | 'A'...'Z' | '^'...'~' | '#'...'\''
  |                                    ^^^ help: use `..=` for an inclusive range

warning: `...` range patterns are deprecated
 --> $DIR/checkers.rs:9:48
  |
9 |         '0'...'9' | 'A'...'Z' | '^'...'~' | '#'...'\''
  |                                                ^^^ help: use `..=` for an inclusive range

warning: 6 warnings emitted

warning: `...` range patterns are deprecated
 --> $DIR/checkers.rs:9:48
  |
9 |         '0'...'9' | 'A'...'Z' | '^'...'~' | '#'...'\''
  |                                                ^^^ help: use `..=` for an inclusive range

warning: 6 warnings emitted

warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
 --> $DIR/lib.rs:1:12
  |
1 | #![feature(specialization)]
  |            ^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information

warning: trait objects without an explicit `dyn` are deprecated
   --> $DIR/response.rs:563:27
    |
563 |     body: Option<Body<Box<io::Read + 'r>>>,
    |                           ^^^^^^^^^^^^^ help: use `dyn`: `dyn io::Read + 'r`
    |
    = note: `#[warn(bare_trait_objects)]` on by default

warning: trait objects without an explicit `dyn` are deprecated
   --> $DIR/response.rs:892:48
    |
892 |     pub fn body(&mut self) -> Option<Body<&mut io::Read>> {
    |                                                ^^^^^^^^ help: use `dyn`: `dyn io::Read`

warning: trait objects without an explicit `dyn` are deprecated
   --> $DIR/response.rs:969:52
    |
969 |     pub fn take_body(&mut self) -> Option<Body<Box<io::Read + 'r>>> {
    |                                                    ^^^^^^^^^^^^^ help: use `dyn`: `dyn io::Read + 'r`

warning: `...` range patterns are deprecated
  --> $DIR/toml_ext.rs:27:12
   |
27 |         '0'...'9' | 'A'...'Z' | 'a'...'z' | '_' | '-' => true,
   |            ^^^ help: use `..=` for an inclusive range
   |
   = note: `#[warn(ellipsis_inclusive_range_patterns)]` on by default

warning: `...` range patterns are deprecated
  --> $DIR/toml_ext.rs:27:24
   |
27 |         '0'...'9' | 'A'...'Z' | 'a'...'z' | '_' | '-' => true,
   |                        ^^^ help: use `..=` for an inclusive range

warning: `...` range patterns are deprecated
  --> $DIR/toml_ext.rs:27:36
   |
27 |         '0'...'9' | 'A'...'Z' | 'a'...'z' | '_' | '-' => true,
   |                                    ^^^ help: use `..=` for an inclusive range

warning: trait objects without an explicit `dyn` are deprecated
  --> $DIR/data.rs:18:63
   |
18 |     self::HttpReader<&'a mut hyper::buffer::BufReader<&'b mut NetworkStream>>;
   |                                                               ^^^^^^^^^^^^^ help: use `dyn`: `dyn NetworkStream`

warning: trait objects without an explicit `dyn` are deprecated
   --> $DIR/data.rs:108:41
    |
108 |         fn concrete_stream(stream: &mut NetworkStream) -> Option<NetStream> {
    |                                         ^^^^^^^^^^^^^ help: use `dyn`: `dyn NetworkStream`

warning: trait objects without an explicit `dyn` are deprecated
   --> $DIR/handler.rs:155:36
    |
155 |     fn clone_handler(&self) -> Box<Handler>;
    |                                    ^^^^^^^ help: use `dyn`: `dyn Handler`

warning: trait objects without an explicit `dyn` are deprecated
   --> $DIR/handler.rs:160:36
    |
160 |     fn clone_handler(&self) -> Box<Handler> {
    |                                    ^^^^^^^ help: use `dyn`: `dyn Handler`

warning: trait objects without an explicit `dyn` are deprecated
   --> $DIR/handler.rs:165:20
    |
165 | impl Clone for Box<Handler> {
    |                    ^^^^^^^ help: use `dyn`: `dyn Handler`

warning: trait objects without an explicit `dyn` are deprecated
   --> $DIR/handler.rs:167:28
    |
167 |     fn clone(&self) -> Box<Handler> {
    |                            ^^^^^^^ help: use `dyn`: `dyn Handler`

warning: trait objects without an explicit `dyn` are deprecated
 --> $DIR/fairings.rs:8:27
  |
8 |     all_fairings: Vec<Box<Fairing>>,
  |                           ^^^^^^^ help: use `dyn`: `dyn Fairing`

warning: trait objects without an explicit `dyn` are deprecated
  --> $DIR/fairings.rs:22:43
   |
22 |     pub fn attach(&mut self, fairing: Box<Fairing>, mut rocket: Rocket) -> Rocket {
   |                                           ^^^^^^^ help: use `dyn`: `dyn Fairing`

warning: trait objects without an explicit `dyn` are deprecated
  --> $DIR/fairings.rs:35:36
   |
35 |     fn add(&mut self, fairing: Box<Fairing>) {
   |                                    ^^^^^^^ help: use `dyn`: `dyn Fairing`

warning: trait objects without an explicit `dyn` are deprecated
  --> $DIR/error.rs:30:17
   |
30 |     Unknown(Box<::std::error::Error + Send + Sync>)
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn ::std::error::Error + Send + Sync`

warning: trait objects without an explicit `dyn` are deprecated
  --> $DIR/route.rs:22:22
   |
22 |     pub handler: Box<Handler>,
   |                      ^^^^^^^ help: use `dyn`: `dyn Handler`

warning: 18 warnings emitted

error: expected string literal
 --> $DIR/database-syntax.rs:6:1
  |
6 | #[database]
  | ^^^^^^^^^^^
  |
  = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)

error: expected string literal
  --> $DIR/database-syntax.rs:10:12
   |
10 | #[database(1)]
   |            ^

error: expected string literal
  --> $DIR/database-syntax.rs:14:12
   |
14 | #[database(123)]
   |            ^^^

error: expected string literal
  --> $DIR/database-syntax.rs:18:12
   |
18 | #[database("hello" "hi")]
   |            ^^^^^^^^^^^^

error: `database` attribute can only be used on structs
  --> $DIR/database-syntax.rs:23:1
   |
23 | enum Foo {  }
   | ^^^^^^^^^^^^^

error: `database` attribute can only be applied to structs with exactly one unnamed field
  --> $DIR/database-syntax.rs:27:11
   |
27 | struct Bar(diesel::SqliteConnection, diesel::SqliteConnection);
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: example: `struct MyDatabase(diesel::SqliteConnection);`

error: `database` attribute can only be used on structs
  --> $DIR/database-syntax.rs:31:1
   |
31 | union Baz {  }
   | ^^^^^^^^^^^^^^

error: `database` attribute cannot be applied to structs with generics
  --> $DIR/database-syntax.rs:35:9
   |
35 | struct E<'r>(&'r str);
   |         ^^^^

error: `database` attribute cannot be applied to structs with generics
  --> $DIR/database-syntax.rs:39:9
   |
39 | struct F<T>(T);
   |         ^^^
